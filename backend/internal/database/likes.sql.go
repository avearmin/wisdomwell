// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: likes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM likes WHERE User_ID = $1 AND Quote_ID = $2
`

type DeleteLikeParams struct {
	UserID  uuid.UUID
	QuoteID uuid.UUID
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.db.ExecContext(ctx, deleteLike, arg.UserID, arg.QuoteID)
	return err
}

const getLike = `-- name: GetLike :one
SELECT user_id, quote_id FROM likes WHERE User_ID = $1 AND Quote_ID = $2
`

type GetLikeParams struct {
	UserID  uuid.UUID
	QuoteID uuid.UUID
}

func (q *Queries) GetLike(ctx context.Context, arg GetLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, getLike, arg.UserID, arg.QuoteID)
	var i Like
	err := row.Scan(&i.UserID, &i.QuoteID)
	return i, err
}

const postLike = `-- name: PostLike :one
INSERT INTO likes (User_ID, Quote_ID)
VALUES ($1, $2)
RETURNING user_id, quote_id
`

type PostLikeParams struct {
	UserID  uuid.UUID
	QuoteID uuid.UUID
}

func (q *Queries) PostLike(ctx context.Context, arg PostLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, postLike, arg.UserID, arg.QuoteID)
	var i Like
	err := row.Scan(&i.UserID, &i.QuoteID)
	return i, err
}
