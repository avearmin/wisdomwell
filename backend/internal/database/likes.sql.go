// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: likes.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM likes WHERE User_ID = $1 AND Quote_ID = $2
`

type DeleteLikeParams struct {
	UserID  uuid.UUID
	QuoteID uuid.UUID
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.db.ExecContext(ctx, deleteLike, arg.UserID, arg.QuoteID)
	return err
}

const getAllLikes = `-- name: GetAllLikes :many
SELECT user_id, quote_id, created_at FROM likes
`

func (q *Queries) GetAllLikes(ctx context.Context) ([]Like, error) {
	rows, err := q.db.QueryContext(ctx, getAllLikes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(&i.UserID, &i.QuoteID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLike = `-- name: GetLike :one
SELECT user_id, quote_id, created_at FROM likes WHERE User_ID = $1 AND Quote_ID = $2
`

type GetLikeParams struct {
	UserID  uuid.UUID
	QuoteID uuid.UUID
}

func (q *Queries) GetLike(ctx context.Context, arg GetLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, getLike, arg.UserID, arg.QuoteID)
	var i Like
	err := row.Scan(&i.UserID, &i.QuoteID, &i.CreatedAt)
	return i, err
}

const postLike = `-- name: PostLike :one
INSERT INTO likes (User_ID, Quote_ID, Created_At)
VALUES ($1, $2, $3)
RETURNING user_id, quote_id, created_at
`

type PostLikeParams struct {
	UserID    uuid.UUID
	QuoteID   uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) PostLike(ctx context.Context, arg PostLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, postLike, arg.UserID, arg.QuoteID, arg.CreatedAt)
	var i Like
	err := row.Scan(&i.UserID, &i.QuoteID, &i.CreatedAt)
	return i, err
}
